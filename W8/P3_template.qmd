---
title: "Client Report - Late Flights & Missing Data (JSON)"
subtitle: "Course DS 250"
author: "Quade Hafen"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd
import numpy as np
from lets_plot import *
import json

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_json("https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json")
```

## Elevator pitch
_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)

_A Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client._

## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__ In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the "NaN" for at least one missing value.__  

We are missing the airport name in the following example.

```{python}
# Include and execute your code here

df = df.replace(['N/A'], np.nan)

# finds N/A and puts Nan

example_row = df[df.isna().any(axis=1)].iloc[0].to_dict()
print(json.dumps(example_row, default=str, indent=2))


```


## QUESTION|TASK 2

__Which airport has the worst delays?__ Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.   

SFO has the worst delays by likely hood.
prop_delayed is the metric I'm using because I think the clients of 
a travel agent will be most interested in the liklyhood of their flight getting delayed.

```{python}

# Group by airport and calculate metrics
airport_summary = (
    df.groupby('airport_code')
    .agg(
        total_flights=('num_of_flights_total', 'sum'),
        total_delayed=('num_of_delays_total', 'sum'),
        total_delay_minutes=('minutes_delayed_total', 'sum')
    )
    .assign(
        prop_delayed=lambda d: d['total_delayed'] / d['total_flights'],
        avg_delay_hours=lambda d: d['total_delay_minutes'] / 60 / d['total_flights']
    )
    .reset_index()
)

worst_by_prop = airport_summary.sort_values('prop_delayed', ascending=False)
# display(worst_by_prop.head(10))  # Top 10 airports with worst delay proportion

worst_airport = worst_by_prop.iloc[0]
print(worst_airport)

```



## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the `Month` variable.)  

_type your results and analysis here_

```{python}
# remove nan columns
df_sifted = df[df['month'].notna()] 

best_month = (
    df_sifted.groupby('month')
    .agg(
        total_flights=('num_of_flights_total', 'sum'),
        total_delayed=('num_of_delays_total', 'sum'),
        total_delay_minutes=('minutes_delayed_total', 'sum')
    ) 
    .assign(
        prop_delayed=lambda d: d['total_delayed'] / d['total_flights'],
        avg_delay_hours=lambda d: d['total_delay_minutes'] / 60 / d['total_flights']
    )
    .reset_index())

best_by_prop = best_month.sort_values('prop_delayed', ascending=False)

best_time = best_by_prop.iloc[11]

best_time

```



## QUESTION|TASK 4

According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. __Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__ You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:  

    a. 100% of delayed flights in the Weather category are due to weather  
    a. 30% of all delayed flights in the Late-Arriving category are due to weather  
    a. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    

_type your results and analysis here_

```{python}

df['num_of_delays_late_aircraft'].fillna(df['Late-Arriving Aircraft'].mean(), inplace=True)

df['Weather_Delays_Total'] = (
    df['Weather'] + 
    (df['Late-Arriving Aircraft'] * 0.3) +
    np.where(df['month'].between(4, 8), df['NAS'] * 0.4, df['NAS'] * 0.65)
)

# Show first 5 rows
df[['month', 'Weather', 'Late-Arriving Aircraft', 'NAS', 'Weather_Delays_Total']].head()
```


```{python}
# Include and execute your code here

```


```{python}
# Include and execute your code here

```



## QUESTION|TASK 5

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.__  

_type your results and analysis here_
```{python}
# Include and execute your code here

```


---


## STRETCH QUESTION|TASK 1

__Which delay is the worst delay?__ Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.

_type your results and analysis here_

```{python}
# Include and execute your code here


```

---

